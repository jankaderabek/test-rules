import { resolve } from 'node:path';
import semver from 'semver';
import consola from 'consola';
import { readPackageJSON, writePackageJSON } from 'pkg-types';

function determineSemverChange(commits, config) {
  let [hasMajor, hasMinor, hasPatch] = [false, false, false];
  for (const commit of commits) {
    const semverType = config.types[commit.type]?.semver;
    if (semverType === "major" || commit.isBreaking) {
      hasMajor = true;
    } else if (semverType === "minor") {
      hasMinor = true;
    } else if (semverType === "patch") {
      hasPatch = true;
    }
  }
  return hasMajor ? "major" : hasMinor ? "minor" : hasPatch ? "patch" : null;
}
async function bumpVersion(commits, config, opts = {}) {
  let type = opts.type || determineSemverChange(commits, config) || "patch";
  const originalType = type;
  const pkgPath = resolve(config.cwd, "package.json");
  const pkg = await readPackageJSON(pkgPath);
  const currentVersion = pkg.version || "0.0.0";
  if (currentVersion.startsWith("0.")) {
    if (type === "major") {
      type = "minor";
    } else if (type === "minor") {
      type = "patch";
    }
  }
  if (config.newVersion) {
    pkg.version = config.newVersion;
  } else if (type) {
    pkg.version = semver.inc(currentVersion, type, opts.preid);
    config.newVersion = pkg.version;
  }
  if (pkg.version === currentVersion) {
    return false;
  }
  consola.info(
    `Bumping version from ${currentVersion} to ${pkg.version} (${originalType})`
  );
  await writePackageJSON(pkgPath, pkg);
  return pkg.version;
}

export { bumpVersion as b, determineSemverChange as d };
